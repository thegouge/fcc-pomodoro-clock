{"version":3,"sources":["assets/Rooster-Crow.wav","components/TimerTool.js","components/Timer.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TimerTool","increment","_this","props","change","label","decrement","_this$props","this","minutes","upperCaseLabel","substring","toUpperCase","react_default","a","createElement","id","concat","className","onClick","Component","Timer","formatTime","seconds","start","stop","breakTime","counting","timeLeft","resetTimer","Footer","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startCountdown","setState","timerID","setInterval","tick","timeLeftBefore","state","playAlarm","stopCountDown","moveToNextTimer","setTimeout","stopAlarm","_this$state","breakMinutes","sessionMinutes","clearInterval","audio","document","getElementById","pause","currentTime","changeMinutes","flag","_this$state2","parseInt","play","Timer_Timer","TimerTool_TimerTool","src","alarm","preload","loop","Boolean","window","location","hostname","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a55da39c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Rooster-Crow.71950975.wav\";","import React, {Component} from \"react\";\r\n\r\nexport default class TimerTool extends Component {\r\n  increment = () => {\r\n    this.props.change(\"increment\" + this.props.label);\r\n  };\r\n  decrement = () => {\r\n    this.props.change(\"decrement\" + this.props.label);\r\n  };\r\n\r\n  render() {\r\n    const {label, minutes} = this.props;\r\n    const upperCaseLabel =\r\n      label.substring(0, 1).toUpperCase() + label.substring(1);\r\n    return (\r\n      <div id={`${label}-stuff`} className=\"timer-tool\">\r\n        <h2 id={`${label}-label`}>{upperCaseLabel} Length</h2>\r\n        <button id={`${label}-increment`} onClick={this.increment}>\r\n          &uarr;\r\n        </button>\r\n        <p id={`${this.props.label}-length`}>{minutes}</p>\r\n        <button id={`${label}-decrement`} onClick={this.decrement}>\r\n          &darr;\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, {Component} from \"react\";\r\n\r\nimport \"../css/timer.css\";\r\n\r\nexport default class Timer extends Component {\r\n  formatTime = (seconds) => {\r\n    let minutes = 0;\r\n\r\n    while (seconds >= 60) {\r\n      seconds -= 60;\r\n      ++minutes;\r\n    }\r\n\r\n    if (seconds < 0) seconds = \"0\";\r\n    if (seconds < 10) seconds = \"0\" + seconds;\r\n    if (minutes < 10) minutes = \"0\" + minutes;\r\n\r\n    return `${minutes}:${seconds}`;\r\n  };\r\n\r\n  render() {\r\n    const {start, stop, breakTime, counting} = this.props;\r\n\r\n    return (\r\n      <div id=\"timer\">\r\n        <h2 id=\"timer-label\">{breakTime ? \"Break\" : \"Session\"}</h2>\r\n        <div id=\"time-left\">{this.formatTime(this.props.timeLeft)}</div>\r\n        <div id=\"timer-buttons\">\r\n          <button id=\"start_stop\" onClick={counting ? stop : start}>\r\n            {counting ? \"Stop\" : \"Start\"}\r\n          </button>\r\n          <button id=\"reset\" onClick={this.props.resetTimer}>\r\n            Reset\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nimport \"../css/footer.css\";\r\n\r\nexport default function Footer() {\r\n  return <footer>Made by Alex!</footer>;\r\n}\r\n","import React, {Component} from \"react\";\n\nimport TimerTool from \"./components/TimerTool\";\nimport Timer from \"./components/Timer\";\nimport Footer from \"./components/Footer\";\n\nimport \"./css/App.css\";\nimport alarm from \"./assets/Rooster-Crow.wav\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sessionMinutes: 25,\n      breakMinutes: 5,\n      timeLeft: 1500,\n      timerID: \"\",\n      breakTime: false,\n      counting: false\n    };\n  }\n\n  startCountdown = () => {\n    this.setState({\n      timerID: setInterval(this.tick, 1000),\n      counting: true\n    });\n  };\n\n  tick = () => {\n    const timeLeftBefore = this.state.timeLeft;\n    this.setState({\n      timeLeft: timeLeftBefore - 1\n    });\n\n    if (timeLeftBefore <= 0) {\n      this.playAlarm();\n      this.stopCountDown();\n      this.moveToNextTimer();\n      setTimeout(this.stopAlarm, 5000);\n    }\n  };\n\n  moveToNextTimer = () => {\n    const {breakTime, breakMinutes, sessionMinutes} = this.state;\n    this.setState({\n      breakTime: !breakTime,\n      timeLeft: !breakTime ? breakMinutes * 60 : sessionMinutes * 60\n    });\n    this.startCountdown();\n  };\n\n  stopCountDown = () => {\n    clearInterval(this.state.timerID);\n    this.setState({\n      counting: false\n    });\n  };\n\n  resetTimer = () => {\n    this.stopCountDown();\n    this.stopAlarm();\n    this.setState({\n      sessionMinutes: 25,\n      breakMinutes: 5,\n      timeLeft: 1500,\n      timerID: \"\",\n      breakTime: false,\n      counting: false\n    });\n  };\n\n  stopAlarm = () => {\n    const audio = document.getElementById(\"beep\");\n    audio.pause();\n    audio.currentTime = 0;\n  };\n\n  playAlarm() {\n    document.getElementById(\"beep\").play();\n  }\n\n  changeMinutes = (flag) => {\n    let {sessionMinutes, breakMinutes} = this.state;\n    switch (flag) {\n      case \"incrementsession\":\n        if (sessionMinutes < 60) ++sessionMinutes;\n        break;\n\n      case \"decrementsession\":\n        if (parseInt(this.state.sessionMinutes) > 1) --sessionMinutes;\n        break;\n\n      case \"incrementbreak\":\n        if (breakMinutes < 60) ++breakMinutes;\n        break;\n\n      case \"decrementbreak\":\n        if (parseInt(this.state.breakMinutes) > 1) --breakMinutes;\n        break;\n\n      default:\n        break;\n    }\n\n    this.setState({\n      sessionMinutes: sessionMinutes,\n      breakMinutes: breakMinutes,\n      timeLeft: this.state.breakTime ? breakMinutes * 60 : sessionMinutes * 60\n    });\n  };\n\n  render() {\n    return (\n      <div className={this.state.counting ? \"App counting\" : \"App\"}>\n        <Timer\n          start={this.startCountdown}\n          stop={this.stopCountDown}\n          timeLeft={this.state.timeLeft}\n          breakTime={this.state.breakTime}\n          counting={this.state.counting}\n          resetTimer={this.resetTimer}\n        />\n        <div id=\"tool-bar\">\n          <TimerTool\n            change={this.changeMinutes}\n            label=\"session\"\n            minutes={this.state.sessionMinutes}\n          />\n\n          <TimerTool\n            change={this.changeMinutes}\n            label=\"break\"\n            minutes={this.state.breakMinutes}\n          />\n        </div>\n        <audio id=\"beep\" src={alarm} preload=\"auto\" loop />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}